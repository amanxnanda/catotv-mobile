// Mocks generated by Mockito 5.0.10 from annotations
// in feed/test/helpers/test_helpers.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:feed/core/enums/connectivity_status.dart' as _i7;
import 'package:feed/core/models/app_models.dart' as _i2;
import 'package:feed/core/services/user_service.dart' as _i3;
import 'package:feed/remote/api/api_service.dart' as _i5;
import 'package:feed/remote/connectivity/connectivity_service.dart' as _i6;
import 'package:flutter/src/widgets/framework.dart' as _i9;
import 'package:flutter/src/widgets/navigator.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stacked_services/src/navigation_service.dart' as _i8;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeUser extends _i1.Fake implements _i2.User {}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i3.UserService {
  @override
  _i2.User get currentUser =>
      (super.noSuchMethod(Invocation.getter(#currentUser),
          returnValue: _FakeUser()) as _i2.User);
  @override
  bool get hasLoggedInUser => (super
          .noSuchMethod(Invocation.getter(#hasLoggedInUser), returnValue: false)
      as bool);
  @override
  _i4.Future<bool> loginWithGoogle() =>
      (super.noSuchMethod(Invocation.method(#loginWithGoogle, []),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> syncUser({_i2.User? user}) =>
      (super.noSuchMethod(Invocation.method(#syncUser, [], {#user: user}),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> isUserProfileExists() =>
      (super.noSuchMethod(Invocation.method(#isUserProfileExists, []),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> createProfile({List<String>? topicIds}) =>
      (super.noSuchMethod(
          Invocation.method(#createProfile, [], {#topicIds: topicIds}),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}

/// A class which mocks [APIService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAPIService extends _i1.Mock implements _i5.APIService {
  @override
  _i4.Future<dynamic> checkUpdateRequired() =>
      (super.noSuchMethod(Invocation.method(#checkUpdateRequired, []),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> performLogin(
          {String? name,
          String? email,
          String? googleId,
          String? avatar,
          String? accessToken}) =>
      (super.noSuchMethod(
          Invocation.method(#performLogin, [], {
            #name: name,
            #email: email,
            #googleId: googleId,
            #avatar: avatar,
            #accessToken: accessToken
          }),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> fetchTopics() =>
      (super.noSuchMethod(Invocation.method(#fetchTopics, []),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> fetchVideos(
          int? skip, int? limit, List<String>? selectedTopics) =>
      (super.noSuchMethod(
          Invocation.method(#fetchVideos, [skip, limit, selectedTopics]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> requestInvite({String? email}) => (super.noSuchMethod(
      Invocation.method(#requestInvite, [], {#email: email}),
      returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> getProfile({String? userId}) =>
      (super.noSuchMethod(Invocation.method(#getProfile, [], {#userId: userId}),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> createUserProfile(
          {String? userId, String? name, List<String>? topicIds}) =>
      (super.noSuchMethod(
          Invocation.method(#createUserProfile, [],
              {#userId: userId, #name: name, #topicIds: topicIds}),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
}

/// A class which mocks [ConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityService extends _i1.Mock
    implements _i6.ConnectivityService {
  @override
  _i4.Stream<_i7.ConnectivityStatus> get connectivity =>
      (super.noSuchMethod(Invocation.getter(#connectivity),
              returnValue: Stream<_i7.ConnectivityStatus>.empty())
          as _i4.Stream<_i7.ConnectivityStatus>);
  @override
  _i4.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i8.NavigationService {
  @override
  String get previousRoute =>
      (super.noSuchMethod(Invocation.getter(#previousRoute), returnValue: '')
          as String);
  @override
  String get currentRoute =>
      (super.noSuchMethod(Invocation.getter(#currentRoute), returnValue: '')
          as String);
  @override
  _i9.GlobalKey<_i10.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(Invocation.method(#nestedNavigationKey, [index]))
          as _i9.GlobalKey<_i10.NavigatorState>?);
  @override
  void config(
          {bool? enableLog,
          bool? defaultPopGesture,
          bool? defaultOpaqueRoute,
          Duration? defaultDurationTransition,
          bool? defaultGlobalState,
          String? defaultTransition}) =>
      super.noSuchMethod(
          Invocation.method(#config, [], {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransition: defaultTransition
          }),
          returnValueForMissingStub: null);
  @override
  _i4.Future<dynamic>? navigateWithTransition(_i9.Widget? page,
          {bool? opaque,
          String? transition = r'',
          Duration? duration,
          bool? popGesture,
          int? id}) =>
      (super.noSuchMethod(Invocation.method(#navigateWithTransition, [
        page
      ], {
        #opaque: opaque,
        #transition: transition,
        #duration: duration,
        #popGesture: popGesture,
        #id: id
      })) as _i4.Future<dynamic>?);
  @override
  _i4.Future<dynamic>? replaceWithTransition(_i9.Widget? page,
          {bool? opaque,
          String? transition = r'',
          Duration? duration,
          bool? popGesture,
          int? id}) =>
      (super.noSuchMethod(Invocation.method(#replaceWithTransition, [
        page
      ], {
        #opaque: opaque,
        #transition: transition,
        #duration: duration,
        #popGesture: popGesture,
        #id: id
      })) as _i4.Future<dynamic>?);
  @override
  bool back({dynamic result, int? id}) => (super.noSuchMethod(
      Invocation.method(#back, [], {#result: result, #id: id}),
      returnValue: false) as bool);
  @override
  void popUntil(_i10.RoutePredicate? predicate) =>
      super.noSuchMethod(Invocation.method(#popUntil, [predicate]),
          returnValueForMissingStub: null);
  @override
  void popRepeated(int? popTimes) =>
      super.noSuchMethod(Invocation.method(#popRepeated, [popTimes]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<dynamic>? navigateTo(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#navigateTo, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i4.Future<dynamic>?);
  @override
  _i4.Future<dynamic>? navigateToView(_i9.Widget? view,
          {dynamic arguments, int? id, bool? preventDuplicates = true}) =>
      (super.noSuchMethod(Invocation.method(#navigateToView, [
        view
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates
      })) as _i4.Future<dynamic>?);
  @override
  _i4.Future<dynamic>? replaceWith(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#replaceWith, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i4.Future<dynamic>?);
  @override
  _i4.Future<dynamic>? clearStackAndShow(String? routeName,
          {dynamic arguments, int? id, Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#clearStackAndShow, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #parameters: parameters
      })) as _i4.Future<dynamic>?);
  @override
  _i4.Future<dynamic>? clearTillFirstAndShow(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#clearTillFirstAndShow, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i4.Future<dynamic>?);
  @override
  _i4.Future<dynamic>? clearTillFirstAndShowView(_i9.Widget? view,
          {dynamic arguments, int? id}) =>
      (super.noSuchMethod(Invocation.method(#clearTillFirstAndShowView, [view],
          {#arguments: arguments, #id: id})) as _i4.Future<dynamic>?);
  @override
  _i4.Future<dynamic>? pushNamedAndRemoveUntil(String? routeName,
          {_i10.RoutePredicate? predicate, dynamic arguments, int? id}) =>
      (super.noSuchMethod(Invocation.method(#pushNamedAndRemoveUntil, [
        routeName
      ], {
        #predicate: predicate,
        #arguments: arguments,
        #id: id
      })) as _i4.Future<dynamic>?);
}
